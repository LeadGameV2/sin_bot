import os
from loguru import logger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants
from telegram.ext import ContextTypes, CallbackContext

import psycopg2

from src import prompts, quiz_questions
from src.states import UserStateEnum, UserStates
from settings import settings

user_state = UserStates()

user_scores = {}



def db_request(query: str, fetch: bool = False):
    try:
        connection = psycopg2.connect(
            database=settings.postgres.db_name,
            host=settings.postgres.host,
            user=settings.postgres.user,
            password=settings.postgres.password,
            port=settings.postgres.port)
        cursor = connection.cursor()
        cursor.execute(query)
        if fetch:
            result = cursor.fetchall()
        else:
            connection.commit()
            result = True
        
    except (Exception, psycopg2.Error) as error:
        logger.warning(f"Error while fetching data from PostgreSQL {error}")
        result = False

    finally:
        if connection:
            cursor.close()
            connection.close()

    return result


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state.update_state(update)
    chat_id = update.effective_chat.id
    logger.info(f"START with {chat_id}")

    user_id = update.effective_chat.id
    user_scores[user_id] = {"score": 0}

    q = f"""INSERT INTO sins.users (id, chat_id, nickname, created, modified) 
    VALUES (gen_random_uuid(), {chat_id}, '{update.effective_user.username}', NOW(), NOW());"""
    db_request(q)

    await context.bot.send_message(
        chat_id=chat_id, text=prompts.GREETING_TEXT
    )
    q = f"select id from sins.users where chat_id = {chat_id}"
    user_uuid = db_request(q, fetch=True)
    if user_uuid:
        user_state.update_uuid(update, user_uuid[0][0])
    else:
        logger.warning(f"No user {chat_id} {update.effective_user.username}")

    await ask_choice(update, context)


async def ask_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state.update_state(update, UserStateEnum.START)
    reply_markup = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≥—Ä–µ—Ö üôèüèª", callback_data="create")
            ],
            [
                InlineKeyboardButton("–ú–æ–∏ –≥—Ä–µ—Ö–∏ üòà", callback_data="my"),
            ],
            [
                InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å —á—É–∂–∏–µ –≥—Ä–µ—Ö–∏ üëÄ", callback_data="vote"),
            ],
            [
                InlineKeyboardButton("–õ—É—á—à–∏–µ –≥—Ä–µ—Ö–∏ üíØ", callback_data="top"),
            ],
            [
                InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç üé≤", callback_data="quiz"),
            ]
        ]
    )

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=prompts.ASK_FOR_CHOICE,
        reply_markup=reply_markup,
    )


async def create_sin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text="–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π —Å–∞–º—ã–π —Å—Ç—Ä–∞—à–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –≥—Ä–µ—Ö"
    )
    user_state.update_state(update, UserStateEnum.WRITE)

async def my_sins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_uuid =  user_state.get_uuid(update)

    q = f"select text from sins.sins where author_id = '{user_uuid}'"
    sins = db_request(q, fetch=True)

    if not sins:
        sins_text = "–ù–µ—Ç –≥—Ä–µ—Ö–æ–≤"
    
    else:
        sins_text = "\n\n".join([f"{num + 1}. {sin[0]}" for num, sin in enumerate(sins)])

    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=sins_text
    )
    await ask_choice(update, context)


def get_total_sins_count():
    q = "SELECT COUNT(*) FROM sins.sins"
    sin_num = db_request(q, fetch=True)

    if sin_num:
        return sin_num[0][0]
    else:
        return 0


def get_top_sins(page, page_size=settings.top_sins_per_page):
    offset = (page - 1) * page_size
    q = f"""SELECT id, text, likes, dislikes
        FROM sins.sins
        ORDER BY likes - dislikes DESC
        LIMIT {page_size} OFFSET {offset}"""
    
    top_sins = db_request(q, fetch=True)
    return top_sins
    

def get_paginated_top_sins(page: int = 1, page_size=settings.top_sins_per_page):
    sins_list = get_top_sins(page, page_size)

    if sins_list:
        top_sins_text = "*–¢–æ–ø –≥—Ä–µ—Ö–æ–≤:*\n\n" + \
            "\n\n".join([f"{(page - 1) * page_size + num + 1}. {sin[1]}\nüëç {sin[2]} üëé {sin[3]}" for num, sin in enumerate(sins_list)])
    else:
        top_sins_text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä–µ—Ö–æ–≤."
    
    return top_sins_text

def get_paginated_navigation(page: int = 1):
    total_sins = get_total_sins_count()

    keyboard = []
    if page > 1:
        keyboard.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"page_{page-1}"))
    if page * settings.top_sins_per_page < total_sins:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"page_{page+1}"))

    return InlineKeyboardMarkup([keyboard])


async def top_sins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text=get_paginated_top_sins(1), 
        reply_markup=get_paginated_navigation(1),
        parse_mode=constants.ParseMode.MARKDOWN)


async def vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_uuid = user_state.get_uuid(update)
    q = f"""SELECT *
            FROM sins.sins s
            LEFT JOIN sins.votes v ON s.id = v.sin_id AND v.author_id = '{user_uuid}'
            WHERE v.id IS null and s.author_id != '{user_uuid}'
            order by s.likes + s.dislikes 
            limit 1"""
    
    sin = db_request(q, fetch=True)
    if not sin:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ù–æ–≤—ã—Ö –≥—Ä–µ—Ö–æ–≤ –Ω–µ—Ç! –ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ üôèüèª"
        )
        await ask_choice(update, context)

    else:
        user_state.update_sin(update, sin[0])

        reply_markup = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("üëç", callback_data="like"),
                 InlineKeyboardButton("üëé", callback_data="dislike")],
                [InlineKeyboardButton("–í –º–µ–Ω—é", callback_data="menu")]
            ]
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=sin[0][1],
            reply_markup=reply_markup
        )

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE, question_idx: int):
    # check if there's score already
    user_id = update.effective_chat.id
    if question_idx == 0 and user_scores[user_id]["score"] > 0:
            score = user_scores[user_id]["score"]
            query = update.callback_query
            await update.callback_query.message.reply_text(
                "–¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –∫–≤–∏–∑ üéâ \n ")
            if score >= 10:
                await query.message.reply_text(    
                    "üî• –¢—ã –≥—Ä–µ—à–Ω–∏–∫ 10 —É—Ä–æ–≤–Ω—è üî• \n ")
                path = (os.getcwd() + r'\src\images\sin10.png')
                await query.message.reply_photo(photo=open(path, 'rb'))
                await ask_choice(update, context)
            elif score >=7:
                await query.message.reply_text(
                    "ü©∏ –¢—ã –≥—Ä–µ—à–Ω–∏–∫ 7 —É—Ä–æ–≤–Ω—è \n ")
                path = (os.getcwd() + r'\src\images\sin7.png')
                await query.message.reply_photo(photo=open(path, 'rb'))
                await ask_choice(update, context)
            elif score >=3:
                await query.message.reply_text(
                    "üòà –¢—ã –≥—Ä–µ—à–Ω–∏–∫ 3 —É—Ä–æ–≤–Ω—è \n ")
                path = (os.getcwd() + r'\src\images\sin3.png')
                await query.message.reply_photo(photo=open(path, 'rb'))
                await ask_choice(update, context)
            elif score >=0:
                await query.message.reply_text(
                    "üïä –¢—ã –≥—Ä–µ—à–Ω–∏–∫ 0 —É—Ä–æ–≤–Ω—è")
                path = (os.getcwd() + r'\src\images\sin0.png')
                await query.message.reply_photo(photo=open(path, 'rb'))
                await ask_choice(update, context)
        
    else:    
    # start quiz
        if question_idx == 0:
            await update.callback_query.message.reply_text("ü©∏ –ü—Ä–∏–≤–µ—Ç, –≥—Ä–µ—à–Ω–∏–∫.\n\n"
            "–°–Ω–∏–º–∏ —Å —Å–µ–±—è Agile-–º–∞—Å–∫—É ‚Äî —Ç—É—Ç –Ω–∏–∫—Ç–æ –Ω–µ —Å–≤—è—Ç–æ–π. \n"
            "–ü–æ—Ä–∞ —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–¥—É: "
            "–Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –∞–¥–∞ —Ç—ã –∑–∞—Å—Ç—Ä—è–ª. \n\n"
            "–ó–∞–ø—É—Å–∫–∞–ª —Ñ–∏—á—É –±–µ–∑ —Ä–µ—Å—ë—Ä—á–∞? \n"
            "–í—Ä–∞–ª –ø—Ä–æ –º–µ—Ç—Ä–∏–∫–∏? \n"
            "–®–∞—Ä–∏–ª –Ω–µ —Ç–æ—Ç —ç–∫—Ä–∞–Ω –Ω–∞ –¥–µ–º–æ? \n\n"
            "–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ —É–∑–Ω–∞–π, –∂–¥—ë—Ç –ª–∏ —Ç–µ–±—è —Å–≤–µ—Ç–ª—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥‚Ä¶ –∏–ª–∏ –≤–µ—á–Ω–∞—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ —Å –¥—å—è–≤–æ–ª–æ–º.")
        
        # quiz questions by index
        question_data = quiz_questions.QUIZ_QUESTIONS[question_idx]
        keyboard = [] 
        for i, option in enumerate(question_data["options"]):
            keyboard.append([InlineKeyboardButton(option, callback_data=f"q{question_idx}_{i}")])
            
        
        await context.bot.send_message(
                chat_id=update.effective_chat.id, text=f"–í–æ–ø—Ä–æ—Å {question_idx + 1}: {question_data['question']}",
                reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()



    if query.data == 'create':
        await create_sin(update, context)

    # Checking quiz answers
    elif  "_" in query.data:
        data = query.data.split("_")
        question_idx = int(data[0][1:])
        selected_option = int(data[1])

        user_id = update.effective_chat.id
        user_scores[user_id]["score"] += (selected_option)
        await query.delete_message()

        # Move to the next question or end the quiz
        next_question_idx = question_idx + 1
        if next_question_idx < len(quiz_questions.QUIZ_QUESTIONS):
            await quiz(update, context, next_question_idx)
        else:
            score = user_scores[user_id]["score"]
            if score >= 10:
                await query.message.reply_text(    
                    "üî• –¢—ã –≥—Ä–µ—à–Ω–∏–∫ 10 —É—Ä–æ–≤–Ω—è üî• \n"
                    "–ê—Ä–∫–∞–Ω –∫–æ—Ç–ª–æ–≤ —Å —Ä–∞—Å–∫–∞–ª—ë–Ω–Ω—ã–º –º–∞—Å–ª–æ–º –≤ —Å–∞–º–æ–º –ø–µ–∫–ª–µ –∞–¥–∞ \n\n"
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è, –≥–¥–µ –∫–æ—Ñ–µ –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫—É—Ö–Ω–∏ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –ª–∞–≤–æ–π, –∞ —Å–æ–∑–≤–æ–Ω—ã –∏–¥—É—Ç –≤ –∞–¥—É ‚Äî –Ω–∞–≤—Å–µ–≥–¥–∞. \n"
                    "–¢—ã –ª–≥–∞–ª –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö, –ø—É—Å–∫–∞–ª —Ñ–∏—á–∏ –±–µ–∑ —Ç–µ—Å—Ç–æ–≤, –∫–æ–ø–∏—Ä–æ–≤–∞–ª —á—É–∂–∏–µ UI –∏ –¥–µ–ª–∞–ª –≤–∏–¥, —á—Ç–æ —ç—Ç–æ ¬´–∏–Ω—Å–∞–π—Ç—ã¬ª. \n"
                    "–ù–æ –µ—Å—Ç—å —à–∞–Ω—Å‚Ä¶ —Ç–æ–Ω–µ–Ω—å–∫–∏–π‚Ä¶ –∫–∞–∫ —Ç–≤–æ–π roadmap. \n\n"
                    "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –≥—Ä–µ—Ö–∏ —ç—Ç–æ–º—É –±–æ—Ç—É ‚Äî \n"
                    "–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–µ–±–µ—Å–Ω–æ–≥–æ CI/CD –æ—Ç–ø—Ä–∞–≤—è—Ç —Ç–µ–±–µ –≥–æ—Ä—è—á–∏–π pull request —Å –ø—Ä–æ—â–µ–Ω–∏–µ–º.")
                path = (os.getcwd() + r'\src\images\sin10.png')
                await query.message.reply_photo(photo=open(path, 'rb'))
                await ask_choice(update, context)
            elif score >=7:
                await query.message.reply_text(
                    "ü©∏ –¢—ã –≥—Ä–µ—à–Ω–∏–∫ 7 —É—Ä–æ–≤–Ω—è \n"
                    "–ê—Ä–∫–∞–Ω —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã—Ö –ø—ã—Ç–æ–∫ \n\n"
                    "–¢—ã –µ—â—ë –Ω–µ –∫–∏–ø–∏—à—å –≤ –∫–æ—Ç–ª–µ, –Ω–æ —É–∂–µ –∫—Ä–µ–ø–∫–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥–æ—Å–∫–µ —Å –≥–≤–æ–∑–¥—è–º–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–æ–ª–∏. \n"
                    "–¢–≤–æ—è –¥—É—à–∞ –ø–æ–∫—Ä—ã—Ç–∞ —Ç—ë–º–Ω—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏: —Ç—ã —à–∞—Ä–∏–ª –Ω–µ —Ç—É –≤–∫–ª–∞–¥–∫—É, –≤–æ—Ä—á–∞–ª –Ω–∞ –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤, –∞ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É –∑–∞–º–µ–Ω–∏–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–µ–∑ –ø–ª–∞–Ω–æ–≤. \n"
                    "–ò –≤—Å—ë –∂–µ ‚Äî –≤ —Ç–µ–±–µ –µ—Å—Ç—å –∏—Å–∫—Ä–∞ —Å–≤–µ—Ç–∞. –ì–¥–µ-—Ç–æ –≥–ª—É–±–æ–∫–æ. –ü–æ–¥ —Å–ª–æ—è–º–∏ —Ñ–∏—á –±–µ–∑ —Ä–µ—Å—ë—Ä—á–∞. \n\n"
                    "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –≥—Ä–µ—Ö–∏ —ç—Ç–æ–º—É –±–æ—Ç—É ‚Äî –∏, –±—ã—Ç—å –º–æ–∂–µ—Ç, –≤–º–µ—Å—Ç–æ –≤–µ—á–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞ –æ—Ç –¥–µ–º–æ–Ω–∞-—Å–∫—Ä–∞–º–∞—Å—Ç–µ—Ä–∞, —Ç–µ–±–µ –¥–∞–¥—É—Ç –≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å.")
                path = (os.getcwd() + r'\src\images\sin7.png')
                await query.message.reply_photo(photo=open(path, 'rb'))
                await ask_choice(update, context)
            elif score >=3:
                await query.message.reply_text(
                    "üòà –¢—ã –≥—Ä–µ—à–Ω–∏–∫ 3 —É—Ä–æ–≤–Ω—è \n"
                    "–ê—Ä–∫–∞–Ω –ø–ª–æ—Ö–æ–π –º–∞–ª—å—á–∏–∫\\–¥–µ–≤–æ—á–∫–∞ \n\n"
                    "–¢—ã —É–º–µ–µ—à—å –∏–≥—Ä–∞—Ç—å —á–∏—Å—Ç–æ... –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —Ö–æ—á–µ—à—å. \n"
                    "–¢—ã —Ö—Ä–∞–Ω–∏—à—å –≤ —Å–µ–±–µ –±–∞–≥–∏ –ø—Ä–æ—à–ª–æ–≥–æ, —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∏ —Ñ–ª–∏—Ä—Ç—É—é—â–∏–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –≤ —Ç–∞—Å–∫-—Ç—Ä–µ–∫–µ—Ä–µ. \n"
                    "–¢–µ–±–µ —á—É—Ç—å-—á—É—Ç—å –±–æ–ª—å–Ω–æ ‚Äî –∏ —á—É—Ç—å-—á—É—Ç—å –ø—Ä–∏—è—Ç–Ω–æ. –í —Ç–≤–æ—ë–º backlog'–µ –µ—Å—Ç—å —Ç–æ, –æ —á—ë–º –ª—É—á—à–µ –º–æ–ª—á–∞—Ç—å. \n\n"
                    "–°–µ–∫—Ä–µ—Ç–∏–∫–∏? \n"
                    "–°–∫–µ–ª–µ—Ç—ã –≤ —à–∫–∞—Ñ—É –µ—Å—Ç—å –∏ —É —Ç–µ–±—è. \n\n"
                    "–†–∞—Å—Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –±–æ—Ç—É. –û–Ω ‚Äî –∫–∞–∫ –ø—Ä–æ–¥–∞–∫—Ç: –ø—Ä–∏—Ç–≤–æ—Ä–∏—Ç—Å—è, —á—Ç–æ –Ω–µ –æ—Å—É–∂–¥–∞–µ—Ç.")
                path = (os.getcwd() + r'\src\images\sin3.png')
                await query.message.reply_photo(photo=open(path, 'rb'))
                await ask_choice(update, context)
            elif score >=0:
                await query.message.reply_text(
                    "üïä –¢—ã –≥—Ä–µ—à–Ω–∏–∫ 0 —É—Ä–æ–≤–Ω—è: –ê—Ä–∫–∞–Ω –ë–µ–ª–∞—è –≤–æ—Ä–æ–Ω–∞ \n\n"
                    "–¢—ã —Å–∏—è–µ—à—å, –∫–∞–∫ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –±–µ–∑ –æ–±–≤–∏–Ω–µ–Ω–∏–π. \n"
                    "–¢—ã –ø—Ä–∏—à—ë–ª –≤ —ç—Ç–æ—Ç –º–∏—Ä –Ω–µ—Å—Ç–∏ —Å–≤–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ —Å–º—ã—Å–ª–∞ –∏ —É–º–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏. \n"
                    "–¢–≤–æ–π backlog —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω, –∞ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã, –∫–∞–∫ —Ç–≤–æ—è –¥—É—à–∞. \n\n"
                    "–õ–∏–∫ —Å–≤—è—Ç–æ–π. –ò–¥–∏ —Å –º–∏—Ä–æ–º, —Å—ã–Ω –±–æ–∂–∏–π –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞. \n"
                    "–ù–æ –µ—Å–ª–∏ —Ç—ã –≤—Å—ë –∂–µ –æ–¥–Ω–∞–∂–¥—ã‚Ä¶ —Å–ª—É—á–∞–π–Ω–æ‚Ä¶ –ø–æ–¥–µ–ª–∞–ª –æ—Ç—á—ë—Ç ‚Äî –Ω–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º –±–æ—Ç—É."
                    "–î–∞–∂–µ —Å–≤—è—Ç—ã–µ –∏–Ω–æ–≥–¥–∞ –ø—É—à–∞—Ç –Ω–µ –≤ —Ç—É –≤–µ—Ç–∫—É.")
                path = (os.getcwd() + r'\src\images\sin0.png')
                await query.message.reply_photo(photo=open(path, 'rb'))
                await ask_choice(update, context)



    elif query.data == 'vote':
        await vote(update, context)

    elif query.data == 'my':
        await my_sins(update, context)

    elif query.data == 'top':
        await top_sins(update, context)

    elif query.data == 'quiz':
        # start new quiz with index 0
        await quiz(update, context, 0)

    elif query.data.startswith("page_"):
        page = int(query.data.split("_")[1])
        await query.edit_message_text(get_paginated_top_sins(page),
                                      reply_markup=get_paginated_navigation(page),
                                      parse_mode=constants.ParseMode.MARKDOWN)
        
    elif query.data == "menu":
        await ask_choice(update, context)

    elif query.data in ("dislike", "like"):
        sin = user_state.get_sin(update)
        user_uuid = user_state.get_uuid(update)
        sin_likes, sin_dislikes = sin[3:5]

        if sin_likes + sin_dislikes == 0:
            msg_text = "–¢—ã –ø–µ—Ä–≤—ã–π, –∫—Ç–æ –æ—Ü–µ–Ω–∏–ª —ç—Ç–æ—Ç –≥—Ä–µ—Ö!"
        else:
            if query.data == "dislike":
                part = int(sin_dislikes * 100 / (sin_likes + sin_dislikes))
            else:
                part = int(sin_likes * 100 / (sin_likes + sin_dislikes))

            msg_text = f"–¢–≤–æ–µ –º–Ω–µ–Ω–∏–µ —Å–æ–≤–ø–∞–ª–æ —Å {part}% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
        
        if query.data == "dislike":
            sin_dislikes += 1
        else:
            sin_likes += 1

        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=msg_text
        )

        q_update = f"""UPDATE sins.sins
                    SET likes = {sin_likes}, 
                        dislikes = {sin_dislikes}
                    WHERE id = '{sin[0]}';"""
        db_request(q_update)
        #create vote

        q_create = f"""INSERT INTO sins.votes (id, author_id, sin_id, created, modified)
                    VALUES (gen_random_uuid(), '{user_uuid}', '{sin[0]}', NOW(), NOW());"""

        db_request(q_create)

        await vote(update, context)


async def text_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status = user_state.get_state(update)
    user_uuid =  user_state.get_uuid(update)

    if status == UserStateEnum.WRITE:
        q = f"""INSERT INTO sins.sins (id, text, anon, likes, dislikes, author_id, created, modified)
            VALUES (gen_random_uuid(), '{update.message.text}', TRUE, 0, 0, '{user_uuid}', NOW(), NOW());"""
        db_request(q)

        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã –æ—Ç–ø—É—Å—Ç–∏–ª —Å–≤–æ–π –≥—Ä–µ—Ö!"
        )
        await ask_choice(update, context)
